# If not running interactively, don't do anything
# Explanation why: https://unix.stackexchange.com/a/257613/386492
case $- in
*i*) ;;
*) return ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#
# History Options
#
# Borrowed from: https://unix.stackexchange.com/a/48116
# and from: https://unix.stackexchange.com/a/556267/386492
HISTSIZE=9000
HISTFILESIZE=$HISTSIZE
HISTCONTROL=ignoreboth:erasedups
HISTTIMEFORMAT="%F %T: "
HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls:ll:git status:ud:clear'
shopt -s histappend
function historymerge {
      history -n; history -w; history -c; history -r;
}
trap historymerge EXIT
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
# Ignore some controlling instructions
# The '&' is a special pattern which suppresses duplicate entries.

#
# Other stuff
#

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# color less
if [ -x /usr/share/source-highlight/src-hilite-lesspipe.sh ]; then
  export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
  export LESS=' -R '
fi

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
  color_prompt=yes
else
  color_prompt=
fi

# Code borrowed from toledo prompt: https://github.com/mmatongo/toledo/blob/master/toledo
parse_git_dirty () {
  STATUS="$(git status 2> /dev/null)"
  RESULT=''
  case "$STATUS" in *"renamed"*) RESULT="${cyan}~${reset}"; ;; esac
  case "$STATUS" in *"branch is ahead"*) RESULT="$RESULT${purple}!${reset}"; ;; esac
  case "$STATUS" in *"new file"*) RESULT="$RESULT${blue}+${reset}"; ;; esac
  case "$STATUS" in *"Untracked files"*) RESULT="$RESULT${cyan}?${reset}"; ;; esac
  case "$STATUS" in *"modified"*) RESULT="$RESULT${yellow}*${reset}"; ;; esac
  case "$STATUS" in *"deleted"*) RESULT="$RESULT${red}-${reset}"; ;; esac
  case "$STATUS" in *"branch is behind"*) RESULT="$RESULT${red}ˬˬ${reset}"; ;; esac
  if [ ! -z $RESULT ]; then
    printf "[$RESULT]"
  fi
}

# export the colours
red='\033[0;31m'
cyan='\033[0;96m'
yellow='\033[0;92m'
blue='\033[0;34m'
reset='\e[0m'
purple='\033[0;35m'

parse_git_branch () {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] $(parse_git_branch)$(parse_git_dirty) \n\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
  ;;
*) ;;

esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias dir='dir --color=auto'
  alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

#
# Aliases
#

# Default to human readable figures
alias df='df -h'
alias du='du -h'

# Some shortcuts for different directory listings
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'
alias l='ls'

alias docker='podman'

# Found https://www.reddit.com/r/programming/comments/3evbbk/how_to_write_a_git_commit_message/ctiuwwz
alias whatthecommit='git commit -m "$(curl -s whatthecommit.com/index.txt)"'

# Found at: https://stackoverflow.com/questions/33150176/get-subnet-mask-in-linux-using-bash/33150670#33150670
alias whichnetwork="ip -o -f inet addr show | awk '/scope global/ {print \$4}'"

# Clipboard aliases
if grep -q Microsoft /proc/version; then
  alias setclip="clip.exe"
  alias getclip="powershell.exe Get-Clipboard"
else
  alias setclip="xclip -selection c"
  alias getclip="xclip -selection c -o"
fi


# Simple HTTP server
alias simplehttpserver="python -m SimpleHTTPServer 8000"

alias vi='vim'


# TODO: change this into a function so it can cd as well
alias gitclipclone='git clone $(getclip)'

alias curlh='curl -s -D - -o /dev/null'

alias rm='trash'

alias urldecode='python -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])"'

# TODO: add option to encode all characters
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'

#Utility required by all below functions.
#https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable#comment21953456_3232433
alias trim="sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g'"

alias groot='cd $(git root)'

highlight() {
  grep -E --color "$1|$"
}

set -o vi
export EDITOR='vim'

# Nice when doing pomodoro. Sleeps specified number of minutes.
pomo() {
  sleep "$((60*$1))"
  notify-send -u critical "Pomodoro!!"
  (play /usr/share/sounds/ubuntu/stereo/system-ready.ogg 2>/dev/null)
}

# Open Jira issue
jira() {
  firefox "$JIRA_URL/jira/browse/$1"
}

command_exists() {
  type "$1" >/dev/null 2>&1
}

# Check if TMUX exists and if running(?)
if command_exists tmux && [ -z "$TMUX" ]; then
  base_session='tmux'
  # Create a new session if it doesn't exist
  tmux has-session -t $base_session || tmux new-session -d -s $base_session
  # Are there any clients connected already?
  client_cnt=$(tmux list-clients | wc -l)
  if [ "$client_cnt" -ge 1 ]; then
    session_name=$base_session"-"$client_cnt
    tmux new-session -d -t "$base_session" -s "$session_name"
    tmux -2 attach-session -t "$session_name" \; set-option destroy-unattached
  else
    tmux -2 attach-session -t "$base_session"
  fi
fi

# Improvement for man for bash builtins.
# Borrowed from: https://unix.stackexchange.com/a/18088
manbash() {
  case "$(type -t "$1"):$1" in
  builtin:*) help "$1" | "${PAGER:-less}" ;; # built-in
  *[[?*]*) help "$1" | "${PAGER:-less}" ;; # pattern
  *) command -p man "$@" ;; # something else, presumed to be an external command
    # or options for the man command or a section number
  esac
}

# Colors for man page
# http://boredzo.org/blog/archives/2016-08-15/colorized-man-pages-understood-and-customized
man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

# Borrowed from: https://unix.stackexchange.com/a/49066/386492
zlipd() (printf "\x1f\x8b\x08\x00\x00\x00\x00\x00" |cat - $@ |gzip -dc)


# Environment setup
export LANG='en_GB.UTF-8'
#export JIRA_URL=''
#export BITBUCKET_URL=''

# Borrowed from: https://anarc.at/blog/2020-03-02-moving-dconf-entries-to-git/
export DCONF_PROFILE=$HOME/.config/dconf/profile
